---
title: "Class 12: RNASeq analysis"
author: "Eric Jordahl"
format: pdf
date: 2022-11-4
toc: TRUE
---

# Transcriptomics

## Import CountData and ColData

```{r, message=FALSE}
library(BiocManager)
library(DESeq2)
```

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```

## **Q1**
**How many genes are in this dataset?**

```{r}
nrow(counts)
```

There are `r nrow(counts)` genes in this dataset

## **Q2**
**How many ‘control’ cell lines do we have?**

```{r}
table(metadata$dex)
```

There are 4 control cell lines in thsi dataset

# Toy Differential Gene Expression

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

```{r, message=FALSE}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

## **Q3**
**How would you make the above code in either approach more robust?**

You could make this code more robust my making it a function so that you can just plug in either control or treated and get the mean for both without having to go through the code twice

## **Q4** 
**Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)**

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[ ,treated$id]
treated.mean <- rowSums( treated.counts )/4 
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

## **Q5 (a)**
**Create a scatter plot showing the mean of the treated samples against the mean of the control samples**

```{r}
plot(meancounts)
```

## **Q5 (b)**
**You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?**

I could also use the geom_point() function to plot this using ggplot2

## **Q6**
**Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?**

```{r}
plot(meancounts, log="xy")
```

You can use the "log" setting in the default plot, to set x and y scale to logarithmic

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
nrow(mycounts)
```

## **Q7**
**What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?**

The arr.ind argument allows us to identify the entries that do not have any measurements so that we can remove them from the dataset without factoring them into the rest of the data.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
sum(up.ind)
sum(down.ind)
```

## **Q8**
**Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?**

There are `r sum(up.ind)` genes

## **Q9**
**Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?**

There are `r sum(down.ind)` genes

## **Q10**
**Do you trust these results? Why or why not?**

No, we do not have a statistical significance at this point, so we cannot tell if this is imporant or not yet without running a T-Test.

# DESeq2 analysis

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r, message=FALSE}
dds <- DESeq(dds)
res <- results(dds)
res
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

# Adding Annotation Data

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
```

```{r, message=FALSE}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
head(res)
```

## **Q11**
**Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.**

```{r, message=FALSE}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

# Data Visualization

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.05), col="gray", lty=2)
```

```{r}
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

# Pathway Analysis

```{r, message=FALSE}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the Results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r, message=FALSE}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)

```{r, message=FALSE}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```


